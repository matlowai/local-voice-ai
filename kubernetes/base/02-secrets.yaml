---
# Secrets for Local Voice AI
# Note: These are development secrets. For production, use proper secret management

---
# LiveKit Secrets
apiVersion: v1
kind: Secret
metadata:
  name: livekit-secrets
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: livekit
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # Base64 encoded values
  # echo -n "devkey" | base64 -> ZGV2a2V5
  # echo -n "secret" | base64 -> c2VjcmV0
  api-key: ZGV2a2V5
  api-secret: c2VjcmV0
---
# API Keys for External Services
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: api-keys
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # These are placeholder keys - replace with actual keys in production
  # echo -n "your-openai-key" | base64
  openai-api-key: bm8ta2V5LW5lZWRlZA==  # "no-key-needed"
  # echo -n "your-groq-key" | base64
  groq-api-key: bm8ta2V5LW5lZWRlZA==  # "no-key-needed"
  # echo -n "your-anthropic-key" | base64
  anthropic-api-key: bm8ta2V5LW5lZWRlZA==  # "no-key-needed"
---
# Database Secrets (for future use)
apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: database
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # echo -n "voiceai" | base64 -> dm9pY2VhaQ==
  username: dm9pY2VhaQ==
  # echo -n "secure_password_123" | base64 -> c2VjdXJlX3Bhc3N3b3JkXzEyMw==
  password: c2VjdXJlX3Bhc3N3b3JkXzEyMw==
  # echo -n "voice_ai_db" | base64 -> dm9pY2VfYWlfZGI=
  database: dm9pY2VfYWlfZGI=
---
# JWT Secrets
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secrets
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: jwt
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # Generate a secure random key: openssl rand -base64 32
  # echo -n "your-jwt-secret-key-32-chars-long" | base64
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleS0zMi1jaGFycy1sb25n
---
# SSL/TLS Certificates (for future HTTPS support)
apiVersion: v1
kind: Secret
metadata:
  name: tls-certs
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: tls
    app.kubernetes.io/component: certificates
    app.kubernetes.io/part-of: local-voice-ai
type: kubernetes.io/tls
data:
  # Replace with actual certificate and key
  # tls.crt: <base64-encoded-certificate>
  # tls.key: <base64-encoded-private-key>
  tls.crt: ""
  tls.key: ""
---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # Grafana admin credentials
  # echo -n "admin" | base64 -> YWRtaW4=
  grafana-username: YWRtaW4=
  # echo -n "admin123" | base64 -> YWRtaW4xMjM=
  grafana-password: YWRtaW4xMjM=
  
  # Alertmanager configuration
  # echo -n "alertmanager-webhook-url" | base64 -> YWxlcnRtYW5hZ2VyLXdlYmhvb2stdXJs
  webhook-url: YWxlcnRtYW5hZ2VyLXdlYmhvb2stdXJs
---
# Registry Secrets (for pulling private images)
apiVersion: v1
kind: Secret
metadata:
  name: registry-secrets
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: registry
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: kubernetes.io/dockerconfigjson
data:
  # Create with: kubectl create secret docker-registry registry-secrets \
  #   --docker-server=<registry-url> \
  #   --docker-username=<username> \
  #   --docker-password=<password> \
  #   --docker-email=<email> \
  #   --namespace=voice-ai \
  #   --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6e319
---
# Environment-specific Secrets
apiVersion: v1
kind: Secret
metadata:
  name: environment-secrets
  namespace: voice-ai
  labels:
    app.kubernetes.io/name: environment
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: local-voice-ai
type: Opaque
data:
  # Environment type
  # echo -n "development" | base64 -> ZGV2ZWxvcG1lbnQ=
  environment: ZGV2ZWxvcG1lbnQ=
  
  # Debug mode
  # echo -n "true" | base64 -> dHJ1ZQ==
  debug: dHJ1ZQ==
  
  # Log level
  # echo -n "info" | base64 -> aW5mbw==
  log-level: aW5mbw==